{"meta":{"title":"易天部落格","subtitle":"可能什么都写，可能什么都不写","description":"个人博客，写一点东西","author":"易天","url":"https://techstay.github.io/my-static-blog","root":"/my-static-blog/"},"pages":[],"posts":[{"title":"翻墙工具trojan-go篇","slug":"翻墙工具trojan-go篇","date":"2020-10-29T11:31:37.000Z","updated":"2020-10-29T11:31:37.000Z","comments":true,"path":"2020/10/29/翻墙工具trojan-go篇/","link":"","permalink":"https://techstay.github.io/my-static-blog/2020/10/29/%E7%BF%BB%E5%A2%99%E5%B7%A5%E5%85%B7trojan-go%E7%AF%87/","excerpt":"","text":"trojan-go是什么trojan是另外一个很好用的翻墙工具，名气虽然没有影梭大，但是功能也不错。而且trojan设计的时候就考虑到了防范检测的问题，通过HTTPS流量来达到非常安全的翻墙目的，抗干扰性也更好一点。trojan-go就是trojan的一个go语言实现，相较于原版trojan来说配置和使用更加简单，我试了一下效果也很不错，于是来给大家介绍一下。 准备条件：配置域名购买和配置域名trojan在使用的时候将自己伪装成一个普通的HTTPS网站，普通用户访问的时候，看到的就是一个普通的网页。一旦发现请求的是trojan协议，trojan就开始干正事了。正因为此，trojan的配置比影梭一些，一个必要的步骤就是购买域名，并在自己的服务器上将域名和证书配置好。所以首先就来讲讲如何配置域名。 第一步，去一个域名网站上买一个域名，最好选择国外的网站，如果嫌麻烦，国内的阿里云什么的也行，但是安全性可能要差一点。购买域名之后，在相应网站上配置好域名解析，将域名解析到你的服务器上面。这样第一步就做好了。 申请免费证书为了使用HTTPS功能，我们还需要去相应的证书服务商那里申请一个免费证书。这样的网站有很多，不过大部分免费证书时间都只有几个月，到期以后还要自己重新申请一遍，操作比较麻烦。所以这里介绍另外一种方法，利用acme.sh这个脚本来自动化处理过程。该工具的详细用法可以参考其wiki。 首先安装acme.sh： 1curl https://get.acme.sh | sh 然后需要验证域名，如果你的服务器上现在运行着80端口服务，先把他关掉。然后运行下面的命令，acme.sh会临时启动一个服务器来完成验证过程。验证完毕后就会自动在其目录下生成证书。 1acme.sh --issue -d mydomain.com --standalone 复制证书虽然有了证书，但是证书放在acme.sh的内部，还需要将其复制出来。acme.sh也提供了相应的命令。这里假设我们的linux服务器用户名是hello，证书和trojan配置文件放在/home/hello/config/中。那么复制命令应该是这样的： 1234acme.sh --install-cert -d example.com \\--key-file /home/hello/config/key.pem \\--fullchain-file /home/hello/config/cert.pem \\--reloadcmd \"sudo service nginx force-reload\" 这样在证书临近到期的时候，acme.sh就会自动开始验证并续期证书，然后将新的证书复制过来。如果指定了最后一行的--reloadcmd，那么还会自动用后面的命令来重新加载服务器，让新证书生效。命令成功运行之后，目录里应该会多出三个pem文件，这就是准备好的证书了。 配置trojan-go服务端配置nginx服务器好了，下面就是比较麻烦的一个部分了。trojan的配置需要我们服务器上运行两个HTTP服务，一个是80端口服务，用来当做假的HTTP服务器，另一个是1234端口（可以自定义其他端口号）的400状态码服务，用来在trojan协议遇到问题的时候来作为默认错误显示（这可以一定程度上防止防火墙的检测）。所以这里就来配置一下nginx这个东西。这里仍然假设我们linux用户名是hello，nginx的HTML文件是/home/hello/html/index.html。 然后编辑/etc/nginx/sites-enabled/default文件，将文件内容修改成类似下面这样的。 1234567891011121314151617181920server &#123; listen 80 default_server; listen [::]:80 default_server; root /home/hello/html; # 这里修改为你的HTML文件存放目录 index index.html index.htm index.nginx-debian.html; server_name _; location / &#123; try_files $uri $uri/ =404; &#125;&#125;# 这里添加一个新的服务server &#123; listen 1234; # 这里可以自定义端口号 return 400;&#125; 至于index.html文件的内容，这个就比较随意了。甚至你可以只写下面一行，不用惊讶，这也是合法的HTML文件，只不过省略了那些标签而已。 1&lt;h1&gt;主页&lt;/h1&gt; 配置完毕之后，就可以启动nginx服务器看看效果了，如果配置正确，那么服务器就可以启动，我们就可以在浏览器中使用域名或者IP地址来访问服务了。查看一下80端口号的网页是否可以正常访问，再看看1234端口号是否可以显示400 Bad Request错误页面。验证正确之后，就可以将nginx服务器设为自启状态。 1234# 验证服务器sudo systemctl start nginx# 验证无误后开机自启sudo systemctl enable nginx 配置trojan-go服务好了，下面终于可以开始配置trojan-go服务了。经过一番研究，我现在比较喜欢docker运行这类服务，一方面docker是一种非常方便的应用分发手段，另一方面，docker有个restart policy参数，允许docker服务在系统启动的同时也一起启动，这样就达到了类似开机自启动的目的，而且还不用配置supervisor那些东西，真的是非常方便。当然docker的问题在于容器内部和外部的配置文件不共通，所以命令看起来就比较冗长，而且如果不熟悉docker的话，可能会遇到一些小问题。所以这里还是建议大家事先学习一下docker的用法，真的非常好用。 前面其实我提到了将证书和trojan配置文件放到一个目录里，这是因为trojan-go的docker镜像会自动使用容器内部的配置文件，所以比较简便的做法就是把容器需要的配置文件放到一起，然后塞到容器里面。docker可以利用-v参数来支持这样的行为。这里的配置文件和证书假设放到/home/hello/config/中，配置文件名字务必是config.json，因为trojan-go默认会以这个名字来读取配置。如果想要了解更多trojan-go配置的话，可以直接参考它的wiki。 服务端配置文件大体上长这样，主要改一下密码就可以了，保存为config.json即可。 123456789101112131415&#123; \"run_type\": \"server\", \"local_addr\": \"0.0.0.0\", \"local_port\": 443, \"remote_addr\": \"localhost\", \"remote_port\": 80, \"password\": [ \"longlonglongpassword\" ], \"ssl\": &#123; \"cert\": \"/etc/trojan-go/cert.pem\", \"key\": \"/etc/trojan-go/key.pem\", \"fallback_port\": 1234 &#125;&#125; 然后就可以使用docker来运行trojan-go服务了，虽然命令看起来挺长的，但是无需操心trojan-go的安装/更新/自启，全部由docker搞定，这也正是docker的魅力。第一次运行可能有错误，所以这里采用--rm参数，一旦停止服务就会删除容器，不留下垃圾，而且日志会在前台打印，方便定位和解决错误。一旦验证发现服务端没有问题，就可以将--rm参数改为-d参数，这样trojan端就可以在后台静静的运行，不用我们操心了。 1234docker run --rm --name trojan --restart always \\ -v /home/hello/config/:/etc/trojan-go/ \\ --network host \\ p4gefau1t/trojan-go 验证服务端是否正常运行的方法很简单，直接在浏览器中访问https://你的域名，因为nginx服务器上配置的只有80端口和1234端口，所以如果这里443端口可以正常访问，说明trojan-go服务端已经成功运行了。第一次访问https的时候会多等待几秒，因为trojan会故意停几秒，防止按时间探测的攻击。当然为了保险起见，最好再用客户端连接一下，如果可以正常翻墙，那么就是真的成功了。 配置trojan客户端电脑客户端从这里下载trojan-go的客户端，解压。客户端配置文件和服务端类似。 12345678910&#123; \"run_type\": \"client\", \"local_addr\": \"localhost\", \"local_port\": 1080, \"remote_addr\": \"你的域名\", \"remote_port\": 443, \"password\": [ \"你的密码\" ]&#125; 然后用下面的命令即可运行trojan客户端。 1trojan-go.exe -config config.json 移动客户端具体参考这个页面，安卓客户端推荐igniter，开源客户端，使用放心。 配置方法如图所示，SNI不用写，备注随意，域名和密码写服务端对应的即可，底下的三个选项全不选。 好吧，关于翻墙工具的介绍就到这里。其实每次写这类文章，我个人也感觉很麻烦，服务端的配置文件一大堆，而且客户端配置文件也一大堆。所以我准备做一个一站式的Web应用，将这些常用的翻墙工具囊括进去，做成可以在Web端轻松管理的工具，同时还可以直接导出客户端配置，到时候也不用在到处找一键配置脚本什么的了。不过这个计划可能要等些时间，到时候也请大家多多支持。","categories":[{"name":"翻墙","slug":"翻墙","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%BF%BB%E5%A2%99/"}],"tags":[{"name":"翻墙","slug":"翻墙","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%BF%BB%E5%A2%99/"},{"name":"代理工具","slug":"代理工具","permalink":"https://techstay.github.io/my-static-blog/tags/%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/"}]},{"title":"Ubuntu 18.04 VPS配置教程","slug":"Ubuntu-18-04-VPS配置教程","date":"2020-03-19T11:26:23.000Z","updated":"2020-03-19T11:26:23.000Z","comments":true,"path":"2020/03/19/Ubuntu-18-04-VPS配置教程/","link":"","permalink":"https://techstay.github.io/my-static-blog/2020/03/19/Ubuntu-18-04-VPS%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/","excerpt":"","text":"最近我hostwind服务器又不能用了，正好干脆把它重装一下算了。这里简单记录一下重装之后简单的配置过程，以后也好作为参考。 配置系统VPS启动之后，只会给你一个root账号，使用root账号工作起来不太安全也不方便，所以肯定需要创建一个自己的账号。选择你喜欢的SSH软件，登录到VPS上。这里我推荐Git for Windows，自带的Git Bash就可以充当SSH的作用。配置好以后简单小巧，使用也方便。关于如何配置Git Bash，稍后就会看到。 1ssh root@1.2.3.4 -p 22 新的VPS刚刚安装完，还没有更新过，因此第一件事情就是更新系统。以下命令都以root账户执行，所以无需sudo，不过有些命令是我从别处贴过来的，带了sudo，复制粘贴的时候带上也无妨。安装过程中可能会弹出一些提示，简单意思就是新版本的配置文件和当前版本的不一样，询问我们使用哪个。一般情况下选择本地版本（这也是默认选择）即可。 12apt updateapt upgrade 接下来就是区域和时间配置，配置完毕之后，一些软件的提示就会变成中文。我个人比较喜欢这样。 12345678# 区域和时间配置sed -i 's/^# zh_CN.UTF-8 UTF-8/zh_CN.UTF-8 UTF-8/g' /etc/locale.genlocale-gen# 这一步可能会出现错误，没关系，等会配置完重启系统在运行一遍即可localectl set-locale zh_CN.UTF-8echo 'LANG=zh_CN.UTF-8' | sudo tee /etc/locale.confsudo timedatectl set-timezone Asia/Shanghaisudo timedatectl set-ntp 1 配置用户首先需要安装以下软件，下面会用到。 1apt install git zsh 新建账户，ubuntu用的是sudo用户组，而arch用的是wheel组，所以还要注意一下。 123useradd yitian -m -g sudo -s /bin/zsh# 别忘了为用户添加密码passwd yitian 如果你喜欢的话，还可以这里干脆把root账号的默认shell改成zsh。 1chsh -s /bin/zsh 默认的zsh其实并不好用，所以需要配置一下。这里简单用antigen包管理器并复制我的配置。 123curl -L git.io/antigen &gt;.antigen.zshwget https://raw.githubusercontent.com/techstay/dotfiles/master/zsh/.zshrcwget https://raw.githubusercontent.com/techstay/dotfiles/master/zsh/.p10k.zsh 对于我们的账户，同样要进行一遍。首先先切换到我们的账户，然后继续。 12345su - yitian# 登录以后应该会出现zsh的选择，选择q，然后继续curl -L git.io/antigen &gt;.antigen.zshwget https://raw.githubusercontent.com/techstay/dotfiles/master/zsh/.zshrcwget https://raw.githubusercontent.com/techstay/dotfiles/master/zsh/.p10k.zsh 前面将用户添加到sudo（或者wheel）组以后，用户就可以使用sudo命令临时获得管理员权限执行一些命令。但是有时候特别是我们个人服务器这样做不太方便，如果你的服务器很安全，而且只有自己用的话，可以将用户设置为无需命令直接sudo执行。当然这样做略有风险，在安全和方便之间请自行权衡。 12sudo mkdir -p /etc/sudoers.d/echo \"$(whoami) ALL=(ALL) NOPASSWD: ALL\" | sudo tee \"/etc/sudoers.d/$(whoami)\" 这样一来VPS就算基本配置好了。 配置密钥登录虽然VPS配置好了，但是每次登录还是有点麻烦。所以为了方便，这里推荐启用SSH的密钥登录，无需密码，配合上面的sudo无需密码，你可能很快就会把自己的用户密码给彻底忘掉。 安装好Git之后打开Git Bash。如果你之前没有创建过密钥，推荐先创建一个。 1ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 创建完毕之后，在~/.ssh/下应该会出现id_rsa和id_rsa.pub两个文件，分别是我们创建的私钥和公钥。有了密钥，就可以开始配置了。 手动配置这里先介绍一下完全化的手动配置，然后在介绍稍微简单一点的配置。嫌麻烦可以直接看下面。 首先还是登录VPS。 1ssh yitian@1.2.4.5 -p 22 登录之后，找到当前用户的SSH信任文件，路径为~/.ssh/authorized_keys，如果没有则创建。 1mkdir -p ~/.ssh 接下来另开一个本地的Git Bash窗口，然后查看一下我们的公钥，选中点击右键将其复制到剪贴板中。 1less ~/.ssh/id_rsa.pub 接着上面的linux SSH终端，这次将公钥粘贴到authorized_keys文件中，然后按Ctrl+X并选择Y保存。 1nano ~/.ssh.authorized_keys 这样以后我们用ssh命令登录VPS的时候，就不需要密码了。 稍微简单一点的手动配置上面的配置过程还是有点麻烦，而且配置完以后，每次登录还是得输入又臭又长的ssh命令。有没有更简单的办法呢？当然有，而且用了这种方法以后，你登录VPS仅需敲几个字母，简单到你以后可能没事就想登录VPS看看。 这需要利用SSH提供的配置文件功能。首先在本地打开或创建~/.ssh/config文件。 1nano ~/.ssh/config 然后添加以下内容，第一段是让所有主机都开启自动保活功能，防止时间长不用终端导致连接断开。第二段就是具体的服务器配置，这里只需要输入用户名和端口号即可。为了安全起见，这里不允许指定密码，而且接下来开启密钥登录之后也不需要密码了。Host右面的名字不一定得是vps，你可以改成自己任意喜欢的名字，当然为了方便最好两三个字母就够了。 1234567Host * ServerAliveInterval 10 ServerAliveCountMax 20Host vps Hostname 1.2.3.4 User yitian Port 22 配置完毕之后，你就可以用ssh vps来取代又臭又长的命令ssh yitian@1.2.3.4 -p 22了。 这里我们仅仅让登录时候能少输入几个字母，密钥登录还是没配置完。接下来就来配置SSH登录。其实这个配置也很简单，SSH自带了一个简化命令，自动读取公钥并复制到服务器中，仅仅需要下面的命令即可。 1ssh-copy-id yitian@1.2.3.4 -p 22 ssh-copy-id和ssh是一家，所以其实不用这么麻烦。配置了服务器信息之后，可以直接用ssh-copy-id vps来复制公钥。 完成之后，我们以后登录VPS的时候，仅需要输入ssh vps即可，是不是非常方便呢？ 安装Meslo NF字体如果你直接用了我前面的zsh主题，使用终端的时候会发现一大堆乱码。我配置的主题使用了增强的字体，所以如果你没有安装对应字体，显示就会乱码。解决办法很简单就，安装Meslo NF字体即可。 复制下面的链接下载字体。 1https:&#x2F;&#x2F;github.com&#x2F;ryanoasis&#x2F;nerd-fonts&#x2F;releases&#x2F;download&#x2F;v2.1.0&#x2F;Meslo.zip 解压之后，全选，点击右键安装字体。然后在Git Bash左上角右键点击，然后选择Option，然后找到Fonts，将字体改成MesloLGS NF字体。 这时候再看看，是不是发现终端主题非常酷呢。 配置影梭众所周知，VPS就是用来翻墙的，这里在介绍一下如何配置影梭。传统配置方法需要安装shadowsocks-libev，然后编辑配置文件并启动，这样稍微有点麻烦，而且不能方便的支持kcp等加速协议。所以这里我为大家介绍一个更简单的配置办法，利用docker和gost，使用我编写的脚本，自动配置并启动服务端。 安装docker首先需要安装docker。 1sudo apt install docker.io 然后将用户添加到docker组中，这样以后使用docker的时候无需sudo权限即可执行命令。 1sudo gpasswd docker -a $(whoami) 然后启动docker服务，并令其开机自启。 12sudo systemctl enable dockersudo systemctl start docker 配置完毕之后，退出终端重新登录一下。然后运行下面的命令，看看能否正常运行，成功以后，就可以进行下一步了。 1docker run --rm hello-world 使用gost_ss脚本启动服务gost_ss是我写的一个利用docker和gost便捷启动影梭服务的脚本，支持影梭和影梭+kcp两种模式。使用方法很简单，首先下载脚本。 1wget https://raw.githubusercontent.com/techstay/climbthewall/master/gost_ss.py 然后看看脚本的命令行参数。 1python3 gost_ss.py -h -password和-port参数是可选的，如果不指定会自动随机生成。如果指定了-k参数则使用kcp协议，如果使用kcp协议的话，还可以使用-mode参数指定kcp协议的模式。一般情况下我们的VPS每个月流量可能有500G-1T之间，而一个人用的话，也就用50G左右，根本用不完。所以可以将模式指定为fast3来获取最好的加速效果，相对应的，流量消耗最多。 1python3 gost_ss.py -k -mode fast3 运行成功之后，脚本会显示出对应的客户端配置。linux用户的话，保存linux配置命令行。安卓等用户的话，复制配置字符串即可。当然如果你用kcp的话，需要客户端支持才行（例如安卓端安装kcp插件）。如果不懂的话，可以先配置影梭，以后再慢慢研究kcp。也可以看我博客那篇配置影梭的文章，里面介绍了客户端如何配置kcp。 好了，下面你应该可以享受自己的VPS了。如果有兴趣的话，还可以买个域名，然后自己搭个网站什么的。","categories":[{"name":"linux","slug":"linux","permalink":"https://techstay.github.io/my-static-blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://techstay.github.io/my-static-blog/tags/linux/"}]},{"title":"各大发行版软件源镜像配置","slug":"各大发行版软件源镜像配置","date":"2020-02-26T12:53:57.000Z","updated":"2020-02-26T12:53:57.000Z","comments":true,"path":"2020/02/26/各大发行版软件源镜像配置/","link":"","permalink":"https://techstay.github.io/my-static-blog/2020/02/26/%E5%90%84%E5%A4%A7%E5%8F%91%E8%A1%8C%E7%89%88%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/","excerpt":"","text":"最近研究Linux，试了一些Linux发行版，但是大多数发行版的软件源速度都不是很理想。所以我这里干脆做了一个收集，把我用过的一些常用发行版的软件源设置方法做个总结，大家也可以做个参考。 Ubuntu 18.0418.04是目前Ubuntu最新的长期支持版。当然我非常期待4月份推出的20.04长期支持版，支持wireguard这一点就非常吸引人。 123456789101112131415# 备份官方镜像cp /etc/apt/sources.list /etc/apt/sources.list.backup# 使用清华镜像源tee /etc/apt/sources.list &lt;&lt;EOL# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverseEOL openSUSE tumbleweedopenSUSE tumbleweed是openSUSE的滚动更新版本，如果你喜欢尝试最新的软件，推荐使用这个版本。manjaro的字体渲染有些问题，所以我现在又找到了openSUSE这个滚动发行版，除了包管理器比pacman慢一点，其他的感觉都很好。当然最好在yast管理程序里关闭官方镜像源，不然他默认还是从官方镜像源开始下载。 123# 添加清华镜像源zypper addrepo -f https://mirrors.tuna.tsinghua.edu.cn/opensuse/tumbleweed/repo/oss/ tsinghua_osszypper addrepo -f https://mirrors.tuna.tsinghua.edu.cn/opensuse/tumbleweed/repo/non-oss/ tsinghua_nonoss ArchArch是一个非常流行的滚动发行版，具有软件源新、高度可定制的特性。当然因为定制性太高了，连桌面什么的都要自己装自己配，所以最后我还是不用Arch了。但是虚拟机里的Arch是真的好用，不装图形界面，启动快更新快，还能体会到最新的软件。 123# 添加清华镜像源和网易镜像源sed -i '1i Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlistsed -i '2i Server = https://mirrors.163.com/archlinux/$repo/os/$arch' /etc/pacman.d/mirrorlist ManjaroManjaro是基于Arch开发的衍生发行版，不仅具有Arch的优点，而且添加了预配置的图形界面，用户可以向使用Ubuntu那样轻松得到一个开箱即用的桌面版Linux系统。缺点就是和Arch一样太激进了，装双系统的话时间长了再更新系统的话，很容易出现一堆软件包冲突更新失败的情况。Manjaro自带了镜像源配置工具，所以不需要我们手动编辑配置文件，简单调用工具将镜像源设置为中国即可。 1pacman-mirrors -c China FedoraFedora默认的GNOME桌面我感觉很丑，所以最后还是放弃了。不过Fedora作为发行版来说还是可以的，虽然是固定版本发行的，但是软件更新速度也很快。新版内核、软件之类的很快就可以获取到。这一点上和滚动发行版没有什么太大差别。这里列出的是Fedora 28及更新版本的配置方法，旧版本配置请参考清华官方镜像源的配置说明。 123456789101112131415161718192021222324252627# 备份旧配置cp /etc/yum.repos.d/fedora.repo /etc/yum.repos.d/fedora.repo.backupcp /etc/yum.repos.d/fedora-updates.repo /etc/yum.repos.d/fedora-updates.repo.backup# 使用清华镜像源tee /etc/yum.repos.d/fedora.repo &lt;&lt;EOL[fedora]name=Fedora \\$releasever - \\$basearchfailovermethod=prioritybaseurl=https://mirrors.tuna.tsinghua.edu.cn/fedora/releases/\\$releasever/Everything/\\$basearch/os/metadata_expire=28dgpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-\\$releasever-\\$basearchskip_if_unavailable=FalseEOLtee /etc/yum.repos.d/fedora-updates.repo &lt;&lt;EOL[updates]name=Fedora \\$releasever - \\$basearch - Updatesfailovermethod=prioritybaseurl=https://mirrors.tuna.tsinghua.edu.cn/fedora/updates/\\$releasever/Everything/\\$basearch/enabled=1gpgcheck=1metadata_expire=6hgpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-fedora-\\$releasever-\\$basearchskip_if_unavailable=FalseEOL","categories":[{"name":"linux","slug":"linux","permalink":"https://techstay.github.io/my-static-blog/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://techstay.github.io/my-static-blog/tags/linux/"}]},{"title":"翻墙工具wireguard篇","slug":"翻墙工具wireguard篇","date":"2020-02-10T13:01:48.000Z","updated":"2020-02-10T13:01:48.000Z","comments":true,"path":"2020/02/10/翻墙工具wireguard篇/","link":"","permalink":"https://techstay.github.io/my-static-blog/2020/02/10/%E7%BF%BB%E5%A2%99%E5%B7%A5%E5%85%B7wireguard%E7%AF%87/","excerpt":"","text":"wireguard是什么wireguard是一个全新的高性能的VPN，使用最新的技术实现的强大VPN。它设计精巧，核心代码仅4000多行，被Linux之父林纳斯亲切的称为“艺术品”，可见wireguard是多么的优秀。所以如果有使用VPN需求的话，可以考虑使用wireguard。 安装wireguardwireguard安装起来稍微有些麻烦，因为它需要内核的支持，所以如果你是OpenVZ架构的VPS的话，基本不用想了，万年2.7的内核，什么也干不了。 Ubuntu 18.04目前可以通过手动安装的方式来使用wireguard。等到今年4月份，Ubuntu 20.04长期支持版出来以后，我们就有原生的wireguard可以使用了。 1234567# Ubuntu 19.10及更新的系统$ sudo apt install wireguard# Ubuntu 19.04及更旧的系统$ sudo add-apt-repository ppa:wireguard/wireguard$ sudo apt-get update$ sudo apt-get install wireguard 这里注意一下，如果你用的是搬瓦工的的VPS，可能会提示add-apt-repository命令未找到，这需要安装另外一个包才可以正常使用。 1sudo apt-get install software-properties-common Arch系发行版因为一直都是滚动更新，所以安装wireguard十分简单，随系统更新新版本内核，然后安装一下wireguard的命令行工具即可。 配置wireguard说实话这里耗费了我不少时间，因为和一般程序服务端、客户端配置文件不同，wireguard是点对点的，而且涉及到了一些网络和防火墙的配置，所以导致我很不理解配置文件的各项含义。 不过熟悉了之后，我完全可以表示，wireguard配置起来一点也不难，相对于OpenVpn之类的甚至还简单多了。为了省事我这里还写了一个配置脚本，自动生成wireguard配置文件和客户端配置文件，方便大家使用。 这里简单复制一下脚本，大家看看内容就明白了，配置起来很简单，顶多修改一下端口号就行了。密钥对都是随机生成的，绝对安全可靠。当然脚本后续可能更新，如果想要最新版的话，请大家关注我的Gitub项目。 使用脚本文件也很简单，直接下载我项目中的最新版脚本，用bash运行即可，注意事项写在项目的README中了，大家注意一下即可。 12wget https://raw.githubusercontent.com/techstay/climbthewall/master/wg.shbash wg.sh 以下是脚本文件内容。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#! /bin/bashconfig_dir=\"$HOME/.wireguard/\"mkdir -p \"$config_dir\"cd \"$config_dir\" || &#123; echo 切换目录失败，程序退出 exit&#125;# 生成两对密钥，分别用作服务器和客户端使用wg genkey | tee pri1 | wg pubkey &gt;pub1wg genkey | tee pri2 | wg pubkey &gt;pub2# 设置密钥访问权限chmod 600 pri1chmod 600 pri2interface=$(ip -o -4 route show to default | awk '&#123;print $5&#125;')ip=$(ip -4 addr show \"$interface\" | grep -oP '(?&lt;=inet\\s)\\d+(\\.\\d+)&#123;3&#125;')# 生成服务端配置文件cat &gt;wg0.conf &lt;&lt;EOL[Interface]PrivateKey = $(cat pri1)Address = 10.10.10.1ListenPort = 54321PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o $interface -j MASQUERADEPostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o $interface -j MASQUERADE[Peer]PublicKey = $(cat pub2)AllowedIPs = 10.10.10.2/32EOL# 生成客户端配置文件cat &gt;client.conf &lt;&lt;EOL[Interface]PrivateKey = $(cat pri2)Address = 10.10.10.2DNS = 8.8.8.8[Peer]PublicKey = $(cat pub1)Endpoint = $ip:54321AllowedIPs = 0.0.0.0/0EOL# 复制配置文件并启动sudo cp wg0.conf /etc/wireguard/ || &#123; echo 复制失败,请检查/etc/wireguard目录或wg0.conf是否已经存在 exit&#125;sudo wg-quick up wg0 || &#123; echo 启动wireguard失败，请检查/etc/wireguard/wg0.conf是否存在错误 exit&#125;# 显示客户端配置文件echo \"----------以下是客户端配置文件，请保存并在客户端中使用----------\"cat client.conf","categories":[{"name":"翻墙","slug":"翻墙","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%BF%BB%E5%A2%99/"}],"tags":[{"name":"翻墙","slug":"翻墙","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%BF%BB%E5%A2%99/"},{"name":"代理工具","slug":"代理工具","permalink":"https://techstay.github.io/my-static-blog/tags/%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/"}]},{"title":"shadowsocks安装和配置","slug":"shadowsocks安装和配置","date":"2020-01-21T12:33:41.000Z","updated":"2020-01-21T12:33:41.000Z","comments":true,"path":"2020/01/21/shadowsocks安装和配置/","link":"","permalink":"https://techstay.github.io/my-static-blog/2020/01/21/shadowsocks%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/","excerpt":"","text":"shadowsocks-libev配置服务端配置以下配置全部以Ubuntu系统为例。首先安装shadowsocks： 1sudo apt install shadowsocks-libev 安装完成之后编辑配置文件/etc/shadowsocks-libev/config.json，改成类似下面的内容。其中端口号port以及密码password需要修改，其他配置无需变动。特别提一点，原来默认的aes-256-cfb有安全漏洞，所以推荐使用下面的全新协议chacha20-ietf-poly1305. 12345678910&#123; \"server\":[\"::0\", \"0.0.0.0\"], \"server_port\":12345, \"local_port\":1080, \"password\":\"123456\", \"timeout\":60, \"method\":\"chacha20-ietf-poly1305\", \"fast_open\":true, \"prefer_ipv6\":true,&#125; 配置完成之后启动服务端。 1sudo systemctl start shadowsocks-libev-server@config 然后查看一下服务状态，如果成功运行的话，使用客户端连接，看看能否科学上网。 1sudo systemctl status shadowsocks-libev-server@config 成功连接上的话，就可以让服务开机自启动了，这样以后我们就不用管它了。 1sudo systemctl enable shadowsocks-libev-server@config 客户端配置虽然一般我们都是用windows客户端或者安卓客户端之类的来连接，但是既然提到了，就顺便说一下shadowsocks-libev客户端的配置方法吧。首先还是需要一个配置文件/etc/shadowsocks-libev/config.json。 12345678910&#123; \"server\":[\"这里改成你的服务器的IP地址\"], \"server_port\":12345, \"local_port\":1080, \"password\":\"123456\", \"timeout\":60, \"method\":\"chacha20-ietf-poly1305\", \"fast_open\":true, \"prefer_ipv6\":true,&#125; 然后启动客户端服务。 123sudo systemctl start shadowsocks-libev-local@config# 成功之后让客户端服务开机自启sudo systemctl enable shadowsocks-libev-local@config Windows客户端配置这里推荐的是影梭Windows版，一个利用.NET实现的小软件，直接就可以在Github下载到。 然后打开软件，由于是图形界面配置，这里我就不介绍了，是个人就会用。 gost配置gost是go语言实现的一个安全隧道，可以用来做很多事情。而且它还非常贴心的内置了影梭协议，用起来比shadowsocks-libev更加方便，而且支持kcp等其他一些协议。 服务端配置gost有中文官方，介绍的非常详细，这里就不多做介绍了。gost是一个单纯的命令行工具，而且并不是每个发行版的软件仓库中都有gost。所以最简单的办法就是利用docker来运行gost，恰好docker可以通过配置重启策略的方式来达到类似于自启服务的效果。 先来安装docker。 12345678# 安装dockersudo apt install docker.io# 将用户添加到docker用户组中，方便直接执行命令无需管理员权限sudo gpasswd docker -a $(whoami)# 启动dockersudo systemctl start docker# 设置docker开机自启sudo systemctl enable docker 以上命令成功执行以后，测试一下docker是否可以正常启动。 1docker run --rm hello-world 然后安装gost镜像。 1docker pull ginuerzh/gost 然后就可以启动gost服务了。如果你不熟悉docker的话，可以先用下面的命令试试，它结束之后会自动删除docker容器，不用担心有残留文件。命令在前台运行成功之后，在客户端中测试一下，看看能否成功上网。 123docker run --rm \\ --net=host \\ ginuerzh/gost -L=ss://AEAD_CHACHA20_POLY1305:password@:8338 等到测试成功之后，用Ctrl-C停止容器，因为它有--rm参数，所以停止后会自动销毁。然后改用这个命令让容器在后台持续运行，并在docker服务重启或者系统重启之后自动跟着重启。 1234docker run -d \\ --net=host \\ --restart=always \\ ginuerzh/gost -L=ss://AEAD_CHACHA20_POLY1305:password@:8338 这里建议大家学习一下docker的用法，一来他也算个重要的软件，二来以后应该会经常和docker容器打交道，如果不熟悉的话，遇到问题还是不太好解决的。 客户端配置服务端运行成功之后，就可以使用客户端来连接了。gost的影梭协议完全兼容shadowsocks-libev，所以可以直接用它来连接，配置方法如上。 如果你用linux服务端的话，也可以像配置服务端一样来配置客户端。安装方法和上面一样，用docker方式安装即可。直接来看看如何用docker来运行客户端连接吧。 1234docker run -d \\ --net=host \\ --restart=always \\ ginuerzh/gost -L=:10800 -F=ss://AEAD_CHACHA20_POLY1305:password@server_ip:8338 启用kcp协议加速kcp默认配置gost内置了kcp协议的支持，使用kcp非常简单，只需要在协议那里添加+kcp即可。 123docker run -d \\ --net=host --restart=always \\ ginuerzh/gost -L=ss+kcp://AEAD_CHACHA20_POLY1305:123456@:12222 gost客户端也需要做相应的修改。 1234docker run -d \\ --net=host --restart=always \\ ginuerzh/gost -L :1080 \\ -F=ss+kcp://AEAD_CHACHA20_POLY1305:123456@1.2.3.4:12222 这种方式启动的kcp使用的是默认配置，对应的配置文件如下。 12345678910111213141516171819202122&#123; \"key\": \"it's a secrect\", \"crypt\": \"aes\", \"mode\": \"fast\", \"mtu\" : 1350, \"sndwnd\": 1024, \"rcvwnd\": 1024, \"datashard\": 10, \"parityshard\": 3, \"dscp\": 0, \"nocomp\": false, \"acknodelay\": false, \"nodelay\": 0, \"interval\": 40, \"resend\": 0, \"nc\": 0, \"sockbuf\": 4194304, \"keepalive\": 10, \"snmplog\": \"\", \"snmpperiod\": 60, \"tcp\": false&#125; 自定义kcp配置如果你的VPS只有自己用的话，可以考虑将加速模式改成fast2或者fast3，来增强加速效果，相对应地，流量消耗也会增大。不过根据我几年的VPS使用经验来看，一般一个月1T的流量，我平时最多用个50G，照这个用法，就算有个fast10模式，也不用担心流量。例如我有下面的配置文件。 12345678910111213141516171819202122&#123; \"key\": \"it's a secrect\", \"crypt\": \"aes\", \"mode\": \"fast3\", \"mtu\" : 1350, \"sndwnd\": 1024, \"rcvwnd\": 1024, \"datashard\": 10, \"parityshard\": 3, \"dscp\": 0, \"nocomp\": false, \"acknodelay\": false, \"nodelay\": 0, \"interval\": 40, \"resend\": 0, \"nc\": 0, \"sockbuf\": 4194304, \"keepalive\": 10, \"snmplog\": \"\", \"snmpperiod\": 60, \"tcp\": false&#125; 把上面的配置文件保存为~/.kcp/kcp.json文件。然后运行服务端的时候手动指定配置文件。注意shell会转义?字符，所以整个参数需要用单引号括起来。后面使用?c=xxx.json的时候同样需要注意这个问题。因为容器的文件系统和本地的文件系统并不一致，所以需要-v参数将文件传递到容器内部，因此命令看起来稍微复杂一点。 1234docker run -d \\ --net=host --restart=always \\ -v ~/.kcp/kcp.json:/kcp.json \\ ginuerzh/gost '-L=ss+kcp://AEAD_CHACHA20_POLY1305:123456@:12222?c=/kcp.json' 同样地，客户端命令也需要变成这种形式。当然，客户端需要同样的配置文件。 123456docker run -d \\ --net=host --restart=always \\ -v ~/.kcp/kcp.json:/kcp.json \\ ginuerzh/gost \\ -L=:10800 \\ '-F=ss+kcp://AEAD_CHACHA20_POLY1305:123456@1.2.3.4:12222?c=/kcp.json' Windows客户端配置默认情况下影梭的Windows客户端不支持kcptun，所以需要进行额外配置。 首先下载kcptun，然后将client_windows_amd64.exe重命名为kcptun.exe，然后把它放到影梭程序的同级目录下。 然后在服务器编辑对话框中额外添加几个参数。 插件程序，就是刚刚改完名字的kcptun。如果不和影梭在同一目录的话，需要改成绝对路径。 插件选项，你改了多少项默认配置，这里就要添加多少项。所以为了省事，我建议只改一下mode。 需要命令行参数的对勾必须打上，然后在对话框中添加-l %SS_LOCAL_HOST%:%SS_LOCAL_PORT% -r %SS_REMOTE_HOST%:%SS_REMOTE_PORT%。这样IP、端口号等参数就会传递给kcptun。 配置完毕之后，应该就可以连接了。测试一下，速度应该比裸的影梭更快。 脚本快捷配置我有个计划，准备编写一个脚本来帮助快速配置程序并生成相应的客户端配置信息。不过脚本编写过程中，因为想得太多，最后脚本难产了。后来我又重新缕了一下需求，把实现比较困难的去掉了，最后终于把脚本写出来了。大家可以试用一下。 脚本使用Python写成，使用的时候要保证无需管理员权限即可运行docker命令。脚本运行成功之后，会显示gost以及影梭客户端的配置文件，方便用户在客户端上配置。为了方便起见，在脚本中我没有提供设置其他kcp参数的选项，可以设置的只有mode参数，这也是比较常用的一个参数。 12345678910111213141516# 下载脚本wget https://raw.githubusercontent.com/techstay/climbthewall/master/gost_ss.sh# 用python运行脚本python gost_ss.py -husage: gost_ss.py [-h] [-password PASSWORD] [-port PORT] [-k] [-mode &#123;fast,fast2,fast3&#125;]optional arguments: -h, --help show this help message and exit -password PASSWORD 密码，未指定则使用随机密码 -port PORT 端口号，未指定则使用随机端口号kcp: -k 是否使用kcp协议加速 -mode &#123;fast,fast2,fast3&#125; kcp协议的加速模式，流量充足可使用fast3","categories":[{"name":"linux","slug":"linux","permalink":"https://techstay.github.io/my-static-blog/categories/linux/"}],"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://techstay.github.io/my-static-blog/tags/shadowsocks/"},{"name":"影梭","slug":"影梭","permalink":"https://techstay.github.io/my-static-blog/tags/%E5%BD%B1%E6%A2%AD/"},{"name":"gost","slug":"gost","permalink":"https://techstay.github.io/my-static-blog/tags/gost/"}]},{"title":"Github Desktop cannot run gpg: No such file or directory 的解决办法","slug":"Github-Desktop-cannot-run-gpg-No-such-file-or-directory-的解决办法","date":"2020-01-20T18:11:54.000Z","updated":"2020-01-20T18:11:54.000Z","comments":true,"path":"2020/01/21/Github-Desktop-cannot-run-gpg-No-such-file-or-directory-的解决办法/","link":"","permalink":"https://techstay.github.io/my-static-blog/2020/01/21/Github-Desktop-cannot-run-gpg-No-such-file-or-directory-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"给Git配置了gpg密钥验证之后，使用Github桌面客户端的时候却出现了如题的错误。其实解决办法也很简单，因为虽然Git Bash自带了gpg工具，但是Github Desktop却不知道啊，所以解决办法很简单，在配置文件里写一下告诉Github客户端就好了。 运行下面命令即可： 1git config --global gpg.program $(which gpg)","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}]},{"title":"购买VPS之后要做的几件事","slug":"购买VPS之后要做的几件事","date":"2019-06-16T15:53:50.000Z","updated":"2019-06-16T15:53:50.000Z","comments":true,"path":"2019/06/16/购买VPS之后要做的几件事/","link":"","permalink":"https://techstay.github.io/my-static-blog/2019/06/16/%E8%B4%AD%E4%B9%B0VPS%E4%B9%8B%E5%90%8E%E8%A6%81%E5%81%9A%E7%9A%84%E5%87%A0%E4%BB%B6%E4%BA%8B/","excerpt":"","text":"配置用户账户刚买的 VPS，系统给你的肯定只有一个 root 账户，但是一般不要用 root 账户来登录，可能存在安全风险。所以我们这里就来创建一个新用户用来登录。由于这时候用的是 root 账户来操作，所以这里的命令不需要在前面加 sudo。有的系统管理员组叫做 wheel，有的叫做 sudo，大家根据自己的 VPS 系统来选择。 1useradd yitian -m -G sudo,wheel 创建完用户之后，别忘了为用户添加密码，为了安全，密码应该设置的比较复杂，最好使用密码管理软件生成强密码，反正照着这里设置的话，可能以后再也用不到这个密码了。 1passwd yitian 如果你怕麻烦，现在就可以设置免密码输入 sudo 命令。首先打开 sudoers 文件： 1nano &#x2F;etc&#x2F;sudoers 然后找到类似下面的一行，然后在后面的ALL之前添加NOPASSWD:，改为下面这样的。这个操作一定要注意，整错了可能就没办法登录 VPS 了。设置成功的话，sudo 组里的用户就再也不需要输入密码确认了。 1%sudo ALL&#x3D;(ALL:ALL) NOPASSWD: ALL 现在，使用刚刚创建的用户登录。可以顺便测试一下 sudo 命令，不需要输入密码就是爽！但是在使用 SSH 登录的时候还是需要密码来登录，所以现在就来设置免密码登录 SSH。 首先打开 SSH 的配置文件： 1sudo nano &#x2F;etc&#x2F;ssh&#x2F;sshd_config 找到下面一行，去掉前面的注释，开启公钥登录功能： 1PubkeyAuthentication yes 然后打开本用户的用户目录下的 ssh 文件夹，没有则创建。在其中新建验证文件并输入你的 SSH 公钥。公钥文件就是你当前操作系统下.ssh/id_rsa.pub文件里的内容。 1nano .ssh&#x2F;authorized_keys 完成之后，重启 SSH 服务，然后退出用户并重新登录一下，应该可以看到不再需要密码就可以登录了。好了，现在你可以把刚刚的用户密码忘掉了，这样一来，几乎没人可以登录你的系统了，安全性妥妥的。甚至你可以做的绝一点，在 SSH 配置文件里直接禁用 ROOT 账户登录和密码登录，这样安全性几乎为 100%。但是这样做的问题就是一旦你的密钥对丢失（虽然这种情况几乎不可能发生），包括你自己都无法登录了。所以怎么做还是得看自己取舍。 升级系统前面的做完了，下面就是系统维护工作了。首先是升级系统，刚安装的 VPS 系统一般都是比较老的，更新到最新可以体验系统的各项新功能。 如果是 Ubuntu： 12sudo apt updatesudo apt upgrade 安装必要软件如果是 Ubuntu： 1sudo apt install zsh git python3-pip screenfetch 如果你想的话还可以安装 oh-my-zsh： 1sh -c &quot;$(wget https:&#x2F;&#x2F;raw.github.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh -O -)&quot; 安装并配置 shadowsocks之前我用 Ubuntu 的时候，pip 里面的 shadowsocks 要比 Ubuntu 源里的更新。但是不知道为啥原因 pip 里面的影梭停更了，到了 Ubuntu 18.04，现在 Ubuntu 里的已经是更新的了。所以我们安装的时候，直接从 Ubuntu 源里安装就行了。 1sudo apt install shadowsocks 然后随便建一个文件夹，准备存放翻墙软件的配置文件。 12mkdir fqcd fq 首先新建一个影梭的配置文件，比方说就叫ss.json。为了保证不被封，最好将端口号改一下，密码也改成一个比较复杂的。 12345678910&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_port&quot;: 8388, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1080, &quot;password&quot;: &quot;mypassword&quot;, &quot;timeout&quot;: 300, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;fast_open&quot;: true&#125; 为了让影梭开机自动启动，我们可能还需要安装一些软件。如果是 Ubuntu 系统，可以在/etc/local.rc文件中添加开机脚本。或者向这里介绍的一样使用任务管理软件 supervisor。首先安装 supervisor： 1sudo apt install supervisor 然后添加 ss 的配置文件： 1sudo nano &#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;ss.conf 配置文件内容如下： 123[program:ss]command&#x3D;ssserver -c &#x2F;home&#x2F;yitian&#x2F;fq&#x2F;ss.jsonautostart&#x3D;true 然后重启 supervisor 服务，就可以看到影梭成功启动了。 12sudo systemctl restart supervisorsudo supervisorctl restart ss 关于 kcptun我现在用的服务器是 Hostwinds，速度还是挺快的，所以就不安装 kcptun 了。而且说实话 kcptun 安装起来太麻烦了，首先需要服务端下载、配置、设置自启，然后将配置文件传回电脑端，在电脑端上也下载客户端、配置、设置自启，这么一通下来也没啥用。所以我就先这么用了。等到将来速度不行的时候，我再配置一下 kcptun。不过我感觉过了 6 月搬瓦工应该就解禁了，没必要现在设置地这么麻烦。","categories":[],"tags":[]},{"title":"更新Manjaro出现Gpgme错误，无效的加密引擎的解决办法","slug":"更新Manjaro出现Gpgme错误，无效的加密引擎的解决办法","date":"2019-03-06T12:08:24.000Z","updated":"2019-03-06T12:08:24.000Z","comments":true,"path":"2019/03/06/更新Manjaro出现Gpgme错误，无效的加密引擎的解决办法/","link":"","permalink":"https://techstay.github.io/my-static-blog/2019/03/06/%E6%9B%B4%E6%96%B0Manjaro%E5%87%BA%E7%8E%B0Gpgme%E9%94%99%E8%AF%AF%EF%BC%8C%E6%97%A0%E6%95%88%E7%9A%84%E5%8A%A0%E5%AF%86%E5%BC%95%E6%93%8E%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"虽然装了双系统，但是平时我用的主要还是 Windows 系统，另外一个 Manjaro 好久没更新了，这几天忽然想起来，于是赶紧打开更新。果然，滚动式更新时间一长想要在更新的话肯定会出问题。这次遇到的问题是更新到一半图形界面会突然挂掉。前几天更新台式机的时候同样也遇到了这个错误，不过切一下终端，然后在终端里面更新完就好了。没想到笔记本这次遇到问题了，由于平时我设置的 locale 是中文，在笔记本屏幕上还显示成了一堆方块，没办法还得在台式机上 SSH 过去。 笔记本上遇到的问题是“Gpgme 错误，无效的加密引擎”，英文错误信息是“manjaro gpgme error invalid crypto engine”，谷歌一下果然有很多类似信息，这下就方便多了。不过由于我之前瞎试了几次，走了不少弯路。在此直接说解决办法吧。首先这个错误原因我猜测是在图形界面挂掉的时候正好碰到 gpg 这些软件更新，然后导致 gpg 数据库损坏，进而 pacman 无法安装软件。那么解决办法就很明显了，修复 gpg 软件即可。具体可参考官方文档。 首先删除掉 pacman 原来的可能已经损坏的 key。 1sudo rm -r &#x2F;etc&#x2F;pacman.d&#x2F;gnupg 然后重新安装密钥环，一开始我搜索到的解决方案和这个类似，不过没有 gnupg，所以一直失败。这一点上还是官方文档比较好。 1sudo pacman -Sy gnupg archlinux-keyring manjaro-keyring 然后重新初始化密钥环。 1sudo pacman-key --init 然后加载那些密钥。 1sudo pacman-key --populate archlinux manjaro 最后一步是可选的，删除那些密钥损坏时下载的软件包。 1sudo pacman -Sc 经过这么几步，我终于成功修复了 Manjaro，然后在终端中更新系统并重启之后，终于成功再次进入了 Manjaro 图形界面，真是可喜可贺！","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}]},{"title":"FC游戏AV麻将俱乐部牌型表","slug":"FC游戏AV麻将俱乐部牌型表","date":"2019-03-05T16:43:50.000Z","updated":"2019-03-05T16:43:50.000Z","comments":true,"path":"2019/03/06/FC游戏AV麻将俱乐部牌型表/","link":"","permalink":"https://techstay.github.io/my-static-blog/2019/03/06/FC%E6%B8%B8%E6%88%8FAV%E9%BA%BB%E5%B0%86%E4%BF%B1%E4%B9%90%E9%83%A8%E7%89%8C%E5%9E%8B%E8%A1%A8/","excerpt":"","text":"老早以前玩过一个 FC 双人麻将游戏，能用点数买好牌，很好玩的游戏，可惜看不懂日文搞不清意思。今天废了老大劲对着词典终于把牌名全搞懂了。 123456789101112131415161718192021222324252627一：一色通顺（两个相同的顺子）平和（四组顺子和刻）断幺九（没有幺九牌（一九数牌和字牌））换牌二：七将（七个对子）三色通顺混全带幺九三：一气通贯三色同刻四：混一色（一种数牌和字牌）混老头小三元八：绿一色四喜和清老头字一色九莲宝灯国士无双","categories":[{"name":"游戏","slug":"游戏","permalink":"https://techstay.github.io/my-static-blog/categories/%E6%B8%B8%E6%88%8F/"}],"tags":[{"name":"游戏","slug":"游戏","permalink":"https://techstay.github.io/my-static-blog/tags/%E6%B8%B8%E6%88%8F/"}]},{"title":"Win10系统无法访问局域网文件的解决办法","slug":"Win10系统无法访问局域网文件的解决办法","date":"2018-12-24T13:46:11.000Z","updated":"2018-12-24T13:46:11.000Z","comments":true,"path":"2018/12/24/Win10系统无法访问局域网文件的解决办法/","link":"","permalink":"https://techstay.github.io/my-static-blog/2018/12/24/Win10%E7%B3%BB%E7%BB%9F%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%B1%80%E5%9F%9F%E7%BD%91%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"最近重装了系统，发现无法访问小米路由器连接的移动硬盘了，而且连我局域网里的笔记本的共享文件都没办法访问了。经过一番研究，发现是Win10默认关闭了SMB文件共享，只要打开即可。 方法很简单，打开控制面板-&gt;程序和功能-&gt;添加或关闭Windows功能，然后搜索找到SMB1.0/CIFS文件共享支持，打开即可，然后重启电脑，应该就可以看到共享文件夹了。","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}]},{"title":"gnome桌面共享vnc客户端连接失败需要降低加密级别的解决办法","slug":"gnome桌面共享vnc客户端连接失败需要降低加密级别的解决办法","date":"2018-10-14T16:37:09.000Z","updated":"2018-10-14T16:37:09.000Z","comments":true,"path":"2018/10/15/gnome桌面共享vnc客户端连接失败需要降低加密级别的解决办法/","link":"","permalink":"https://techstay.github.io/my-static-blog/2018/10/15/gnome%E6%A1%8C%E9%9D%A2%E5%85%B1%E4%BA%ABvnc%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E9%9C%80%E8%A6%81%E9%99%8D%E4%BD%8E%E5%8A%A0%E5%AF%86%E7%BA%A7%E5%88%AB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"由于一些Windows VNC客户端（例如RealVNC、TightVNC等）不支持Gnome桌面Vino服务端的加密，所以会出现这种错误。解决办法是打开dconf编辑器，在org-&gt;gnome-&gt;desktop-&gt;remote-access上，关闭require-encryption选项。 之后再次连接，可以发现这时候就可以连接到Linux桌面啦！","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}]},{"title":"在Hexo博客上添加可爱的Live 2D模型","slug":"在Hexo博客上添加可爱的Live-2D模型","date":"2018-09-15T14:56:47.000Z","updated":"2018-09-15T14:56:47.000Z","comments":true,"path":"2018/09/15/在Hexo博客上添加可爱的Live-2D模型/","link":"","permalink":"https://techstay.github.io/my-static-blog/2018/09/15/%E5%9C%A8Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%8F%AF%E7%88%B1%E7%9A%84Live-2D%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"在查找资料的偶然间，我发现一个博客上有非常可爱的Live 2D模型，当时我就被打动了，马上开启审查元素，试图找出这个Live 2D模型的信息，可是找了半天没找到。最后通过截图-&gt;谷歌图片的方式，终于一层一层的找到了相关资料，我正好有一个Hexo博客，所以今天就来在博客上添加一波Live 2D模型！ 首先，安装npm包： 1npm install --save hexo-helper-live2d 然后在hexo的配置文件_config.yml中添加如下配置，详细配置可以参考文档： 12345678910111213141516live2d: enable: true scriptFrom: local pluginRootPath: live2dw&#x2F; pluginJsPath: lib&#x2F; pluginModelPath: assets&#x2F; tagMode: false debug: false model: use: live2d-widget-model-shizuku display: position: right width: 150 height: 300 mobile: show: true 然后下载模型，模型名称可以到这里参考，一些模型的预览可以在这里。 1npm install live2d-widget-model-shizuku 所有模型列表如下： live2d-widget-model-chitose live2d-widget-model-epsilon2_1 live2d-widget-model-gf live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru) live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru) live2d-widget-model-haruto live2d-widget-model-hibiki live2d-widget-model-hijiki live2d-widget-model-izumi live2d-widget-model-koharu live2d-widget-model-miku live2d-widget-model-ni-j live2d-widget-model-nico live2d-widget-model-nietzsche live2d-widget-model-nipsilon live2d-widget-model-nito live2d-widget-model-shizuku live2d-widget-model-tororo live2d-widget-model-tsumiki live2d-widget-model-unitychan live2d-widget-model-wanko live2d-widget-model-z16 下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。 一切就绪之后，用hexo server命令启动服务器，稍等一下就可以看到右下角出现了一个可爱的萌萌哒的妹纸！","categories":[{"name":"前端","slug":"前端","permalink":"https://techstay.github.io/my-static-blog/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://techstay.github.io/my-static-blog/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Hexo","slug":"Hexo","permalink":"https://techstay.github.io/my-static-blog/tags/Hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"https://techstay.github.io/my-static-blog/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"}]},{"title":"windows安装scrapy出现utf-8 codec can't decode byte的解决办法","slug":"windows安装scrapy出现utf-8-codec-can-t-decode-byte的解决办法","date":"2017-12-03T10:24:07.000Z","updated":"2017-12-03T10:24:07.000Z","comments":true,"path":"2017/12/03/windows安装scrapy出现utf-8-codec-can-t-decode-byte的解决办法/","link":"","permalink":"https://techstay.github.io/my-static-blog/2017/12/03/windows%E5%AE%89%E8%A3%85scrapy%E5%87%BA%E7%8E%B0utf-8-codec-can-t-decode-byte%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"这种情况是由于scrapy的python包是针对linux编写的，而windows下的Powershell终端编码并不是UTF-8，所以出现了这个编码错误。解决办法就是用支持UTF-8的终端，例如Git Bash来运行pip install scrapy命令。","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}]},{"title":"使用FTP向服务器上传文件时出现550 The filename, directory name, or volume label syntax is incorrect错误的解决办法","slug":"使用FTP向服务器上传文件时出现550-The-filename-directory-name-or-volume-label-syntax-is-incorrect错误的解决办法","date":"2017-11-14T18:59:01.000Z","updated":"2017-11-14T18:59:01.000Z","comments":true,"path":"2017/11/15/使用FTP向服务器上传文件时出现550-The-filename-directory-name-or-volume-label-syntax-is-incorrect错误的解决办法/","link":"","permalink":"https://techstay.github.io/my-static-blog/2017/11/15/%E4%BD%BF%E7%94%A8FTP%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%97%B6%E5%87%BA%E7%8E%B0550-The-filename-directory-name-or-volume-label-syntax-is-incorrect%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"这种情况一般是由于服务器不支持非ASCII字符（例如中文），解决办法很简单，所有文件都改成英文名称！ 顺便说一下，对于自建Linux服务器，可以通过修改locale等方式让服务器支持中文。对于另外一些不太灵活的应用容器（比如Azure），大概就只能老老实实改文件名为英文了。","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}]},{"title":"用Hexo制作自己的静态博客","slug":"用Hexo制作自己的静态博客","date":"2017-11-13T16:21:20.000Z","updated":"2017-11-13T16:21:20.000Z","comments":true,"path":"2017/11/14/用Hexo制作自己的静态博客/","link":"","permalink":"https://techstay.github.io/my-static-blog/2017/11/14/%E7%94%A8Hexo%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"博客是一个老东西了，如果我们想写博客的话，有两种选择，第一种是在博客网站上，例如QQ空间、新浪博客、简书等网站上申请账号，然后编写博客；第二种就是自己找服务器搭一个博客。搭建博客也有两种选择，第一种是搭建动态博客，这方面最流行的就是WordPress，第二种就是搭建静态博客，这方面有很多选择。说到功能上，动态博客当然更胜一筹，但是所需的服务器资源比较大，如果想取得较好的效果，就必须花钱购买服务器资源。静态博客功能比较单一，但是由于省资源，所以可以找到很多免费部署的资源（例如Github Pages）。 搭建静态博客这方面有很多工具可供选择，我看了看Hexo是一个很不错的选择，使用人数比较多，功能也挺丰富，所以这里我就选择Hexo来搭建静态博客。这篇文章在很多地方也参考了Hexo 官方文档。 安装Hexo在安装Hexo之前，首先需要安装Node.js和Git两个工具。 然后输入下面命令来安装Hexo。 1$ npm install -g hexo-cli 建立博客安装好Hexo之后，就可以建立博客了。建立博客需要输入以下命令。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 等待npm安装好所有依赖包之后，博客就算建立好了。博客的文件结构如下面所示。 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 配置博客在项目外层文件夹中有一个_config.yml，这是博客项目的全局配置文件，在这里有很多选项需要我们修改。例如博客主标题、子标题、描述、作者、语言、时区、博客地址和根地址等等。这里列举的这些地址都需要我们根据自己需求进行修改。 1234567891011title: 易天的静态个人博客subtitle:description:author: 易天language: zh-CNtimezone: Asia&#x2F;Shanghai# URL## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: http:&#x2F;&#x2F;yoursite.comroot: &#x2F; Hexo命令下面介绍一下Hexo的常用命令，方括号[]中包括的是可选项，尖括号&lt;&gt;中包括的是必选项。 创建新博客项目如果未指定文件夹，hexo会在当前文件夹创建项目文件。 1$ hexo init [folder] 创建新文章如果未指定布局，会使用配置文件中的默认布局选项。如果文章标题中含有空格等字符，需要使用双引号包括标题。 1$ hexo new [layout] &lt;title&gt; 生成静态博客该命令会生成博客的静态文件。 1$ hexo generate 启动本地服务器启动本地服务器来开发博客，默认地址为 http://localhost:4000/ 。 1$ hexo server 还有一些命令这里就不介绍了，需要详细了解的话可以直接查看官方文档。 编写新文章编写新文章使用下面的命令。 1$ hexo new [layout] &lt;title&gt; 默认情况下布局有post、page、draft三个，它们所在的文件夹位置也不同。默认使用post布局，生成的文章会放在source/_posts下。执行完这个命令之后，在该文件夹会出现名为&lt;title&gt;.md的markdown格式文件，这就是我们的博客文件，我们可以按照markdown语法来编辑它。 项目中还有一个名为scaffolds的文件夹，里面存放的不同布局的模板。我希望所有文章都有分类属性，所以需要在post.md中添加categories:一行。这里在---之间包括的代码是文章的属性，将会由Hexo渲染为实际的样式。我们的博客文章需要写在这一部分的后面。 123456---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:--- 这里我写了一篇小文章，介绍了一点经验。 12345678910111213---title: 在客户端上登录微软邮箱时提示您输出的用户名或密码不起作用的解决办法date: 2017-11-13 18:42:56tags: - 疑难杂症 - 电子邮箱categories: - 疑难杂症---有些同学可能会在用微软邮箱登录outlook或者其他邮箱客户端的时候，明明输入的是正确的用户名和密码，但是却提示“您输入的用户名或密码不起作用”。其实原因很简单，这是因为你的微软账号开启了二次验证，而邮箱客户端并不支持这个功能。当然解决办法也很简单，登录[微软账户更多安全选项](https:&#x2F;&#x2F;account.live.com&#x2F;proofs&#x2F;Manage&#x2F;additional)中，然后找到应用密码这个，将应用密码作为邮箱密码输入到邮箱客户端中即可解决问题。当然对于Xbox等无法登陆的问题，也可以使用这个方法来解决。 写完之后，使用下面的命令启动本地服务器，然后访问http://localhost:4000/查看一下博客效果。 1$ hexo server 添加Disqus评论支持静态博客因为是静态的，所以没有办法支持评论等功能。不过很多第三方评论服务都可以通过添加JS代码的方式让博客可以支持评论功能。原来国内比较著名的第三方评论系统有多说，可惜因为无法盈利已经关闭了。Hexo官方支持Disqus，一个国外的第三方评论平台。当然，为了使用Disqus，首先你需要去注册一个账号，并添加一个网站。 默认情况下，Hexo的默认主题landscape是支持Disqus的，相应的源代码可以查看themes\\landscape\\layout\\_partial/after-footer.ejs文件。当主配置文件中存在disqus_shortname选项，而且相应URL正确配置的话，Hexo就会自动显示Disqus评论。这是我的配置，这里的名称是我的网站的名称。 1disqus_shortname: yitian-static-blog 成功配置之后，在每篇文章下面，应该就会看到一个Disqus评论框了。 静态资源处理假如整个博客只有少量图片等静态资源，我们可以在source文件夹中新建一个image文件夹，然后将图片放置进去，在文章中使用MarkDown标准格式![图片名](图片地址)即可访问。但是假如大部分文章都需要图片，那么这种方式就不太适用了。 这时候，我们可以在配置文件中设置post_asset_folder选项为true。这样在创建文章时，Hexo会同时创建一个和文章同名的文件夹，我们可以将每个文章单独的资源放入该文件夹，然后以相对路径的方使引用。 1post_asset_folder: true 举个例子，假如图片名为hello.jpg，已经放置到文章同名的文件夹中，那么在文章中引用图片，可以使用标准Markdown形式![hello](hello.jpg)。不过这种方式仅适用于在文章页面下，假如在主页或者归档页面查看文章，由于相对路径不同，图片是无法正常显示的。 对于这个问题，我们需要使用Hexo的标签插件来解决。这个插件在Hexo 3中已经包括到核心包中，所以我们可以直接使用，使用语法如下。如果图片名或标题有空格，需要使用双引号包括。 1&#123;% asset_link 图片名 图片标题 %&#125; 这样一来，不管在哪个页面，图片都可以正常显示了。 发布博客发布博客有很多种方式，如果你有一个自己的服务器，可以选择FTP、RSync、Git等多种方式发布到服务器。当然这里为了省事就直接发布到Github Pages上。由于Github Pages要求静态网站在项目的根目录或者docs目录下，所以这里还要对项目进行一下小修改，在配置文件中将发布路径改为docs。 1public_dir: docs 然后生成静态页面。 1$ hexo generate 然后将所有代码一起提交到Github上，并在设置中选择docs选项，然后保存。 然后访问Github Pages的路径，就会发现项目已经出现了，当然样式都是乱的。因为我们还没有设置合适的URL。本地开发的话，路径直接就是域名。但是Github Pages的路径一般都不是以域名开头的，所以需要我们按照自己的项目路径进行修改，下面是我的项目配置。 12url: https:&#x2F;&#x2F;techstay.github.ioroot: &#x2F;my-static-blog&#x2F; 修改完毕之后别忘了执行hexo generate重新生成静态文件，然后再次提交，就可以发现这次项目完美的出现了。 当然这篇文章仅仅介绍了Hexo的一点点知识，Hexo还有丰富的主题、插件可供探索。这里就仅仅抛砖引玉，各位如果有兴趣的话请自行探索吧！最后附上我的静态博客地址https://techstay.github.io/my-static-blog/，欢迎大家查看！","categories":[{"name":"前端","slug":"前端","permalink":"https://techstay.github.io/my-static-blog/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://techstay.github.io/my-static-blog/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Hexo","slug":"Hexo","permalink":"https://techstay.github.io/my-static-blog/tags/Hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"https://techstay.github.io/my-static-blog/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"}]},{"title":"在客户端上登录微软邮箱时提示您输出的用户名或密码不起作用的解决办法","slug":"在客户端上登录微软邮箱时提示您输出的用户名或密码不起作用的解决办法","date":"2017-11-13T10:42:56.000Z","updated":"2017-11-13T10:42:56.000Z","comments":true,"path":"2017/11/13/在客户端上登录微软邮箱时提示您输出的用户名或密码不起作用的解决办法/","link":"","permalink":"https://techstay.github.io/my-static-blog/2017/11/13/%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8A%E7%99%BB%E5%BD%95%E5%BE%AE%E8%BD%AF%E9%82%AE%E7%AE%B1%E6%97%B6%E6%8F%90%E7%A4%BA%E6%82%A8%E8%BE%93%E5%87%BA%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E6%88%96%E5%AF%86%E7%A0%81%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","excerpt":"","text":"有些同学可能会在用微软邮箱登录outlook或者其他邮箱客户端的时候，明明输入的是正确的用户名和密码，但是却提示“您输入的用户名或密码不起作用”。其实原因很简单，这是因为你的微软账号开启了二次验证，而邮箱客户端并不支持这个功能。 当然解决办法也很简单，登录微软账户更多安全选项中，然后找到应用密码这个，将应用密码作为邮箱密码输入到邮箱客户端中即可解决问题。当然对于Xbox等无法登陆的问题，也可以使用这个方法来解决。","categories":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"}],"tags":[{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"},{"name":"电子邮箱","slug":"电子邮箱","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/"}]}],"categories":[{"name":"翻墙","slug":"翻墙","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%BF%BB%E5%A2%99/"},{"name":"linux","slug":"linux","permalink":"https://techstay.github.io/my-static-blog/categories/linux/"},{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"},{"name":"游戏","slug":"游戏","permalink":"https://techstay.github.io/my-static-blog/categories/%E6%B8%B8%E6%88%8F/"},{"name":"前端","slug":"前端","permalink":"https://techstay.github.io/my-static-blog/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"翻墙","slug":"翻墙","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%BF%BB%E5%A2%99/"},{"name":"代理工具","slug":"代理工具","permalink":"https://techstay.github.io/my-static-blog/tags/%E4%BB%A3%E7%90%86%E5%B7%A5%E5%85%B7/"},{"name":"linux","slug":"linux","permalink":"https://techstay.github.io/my-static-blog/tags/linux/"},{"name":"shadowsocks","slug":"shadowsocks","permalink":"https://techstay.github.io/my-static-blog/tags/shadowsocks/"},{"name":"影梭","slug":"影梭","permalink":"https://techstay.github.io/my-static-blog/tags/%E5%BD%B1%E6%A2%AD/"},{"name":"gost","slug":"gost","permalink":"https://techstay.github.io/my-static-blog/tags/gost/"},{"name":"疑难杂症","slug":"疑难杂症","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"},{"name":"游戏","slug":"游戏","permalink":"https://techstay.github.io/my-static-blog/tags/%E6%B8%B8%E6%88%8F/"},{"name":"前端","slug":"前端","permalink":"https://techstay.github.io/my-static-blog/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Hexo","slug":"Hexo","permalink":"https://techstay.github.io/my-static-blog/tags/Hexo/"},{"name":"静态博客","slug":"静态博客","permalink":"https://techstay.github.io/my-static-blog/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"},{"name":"电子邮箱","slug":"电子邮箱","permalink":"https://techstay.github.io/my-static-blog/tags/%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/"}]}